#include <Servo.h>
Servo kapak_sag;
Servo kapak_sol;
Servo servokol;
//Sol ON Mesafe Sensörü
#define solons_echo 35
#define solons_trig 34
//Sol ARKA Mesafe Sensörü
#define solarkas_echo 38
#define solarkas_trig 39
//Hazne Mesafe Sensörüd
#define hs_echo 32
#define hs_trig 33
//Duvar Mesafe Sensörü
#define dvr_echo 48
#define dvr_trig 49
//ARKA Mesafe Sensörü
#define arka_echo 36
#define arka_trig 37
//Motorlar
#define right_1 42 // İLERİ sağ
#define right_2 40 //GERİ sağ
#define right_pwm 8 // SAG pwm
#define left_1 43 //SOL İLERİ
#define left_2 41 //SOL GERİ
#define left_pwm 9 //left pwm
//Hazne Renk Sensörü
#define hs_S0 22
#define hs_S1 24
#define hs_S2 26
#define hs_S3 28
#define hs_SOut 30
//Çöp Kutu Renk Sensörü
#define ks_S0 23
#define ks_S1 25
#define ks_S2 27
#define ks_S3 29
#define ks_SOut 31
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////// VARIABLES ////////////////////////////////////////////////////////////////////////////////
#define pwm 60
#define kp 8
#define ideal 7
unsigned long t = 0;
int fark;
int fark2 = 0;
int hata = 0;
int echo;
int trig;
int arka;
int solon;
int solarka;
int duvar;
int hazne;
int state = 0;
int pid;
int pug_color;
int box_color;
int solonmod;
int solarkamod;
int count = 1;
int pos = 0;
long echo_time, distance;
int green, red, blue;
int S2, S3, SOut;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////// MOVEMENT ///////////////////////////////////////////////////////////////////////
void forward()
{
  digitalWrite(left_1, HIGH);
  digitalWrite(left_2, LOW);
  digitalWrite(right_1, HIGH);
  digitalWrite(right_2, LOW);
  analogWrite(left_pwm, pwm + 6);
  analogWrite(right_pwm, pwm);
}
void forward_pwm(int x)
{
  digitalWrite(left_1, HIGH);
  digitalWrite(left_2, LOW);
  digitalWrite(right_1, HIGH);
  digitalWrite(right_2, LOW);
  analogWrite(left_pwm, x + 6);
  analogWrite(right_pwm, x);
}
void backward()
{
  digitalWrite(left_1, LOW);
  digitalWrite(left_2, HIGH);
  digitalWrite(right_1, LOW);
  digitalWrite(right_2, HIGH);
  analogWrite(left_pwm, pwm);
  analogWrite(right_pwm, pwm);
}
void backward_pwm(int x)
{
  digitalWrite(left_1, LOW);
  digitalWrite(left_2, HIGH);
  digitalWrite(right_1, LOW);
  digitalWrite(right_2, HIGH);
  analogWrite(left_pwm, x);
  analogWrite(right_pwm, x);
}
void left()
{
  digitalWrite(left_1, LOW);
  digitalWrite(left_2, HIGH);
  digitalWrite(right_1, HIGH);
  digitalWrite(right_2, LOW);
  analogWrite(left_pwm, pwm);
  analogWrite(right_pwm, pwm);
}

void right()
{
  digitalWrite(left_1, HIGH);
  digitalWrite(left_2, LOW);
  digitalWrite(right_1, LOW);
  digitalWrite(right_2, HIGH);
  analogWrite(left_pwm, pwm);
  analogWrite(right_pwm, pwm);
}
void wait()
{
  digitalWrite(left_1, LOW);
  digitalWrite(left_2, LOW);
  digitalWrite(right_1, LOW);
  digitalWrite(right_2, LOW);
  analogWrite(left_pwm, 0);
  analogWrite(right_pwm, 0);
}

void handbrake()
{
  digitalWrite(left_1, !digitalRead(left_1));
  digitalWrite(left_2, !digitalRead(left_2));
  digitalWrite(right_1, !digitalRead(right_1));
  digitalWrite(right_2, !digitalRead(right_2));
  analogWrite(left_pwm, 200);
  analogWrite(right_pwm, 200);
  delay(20);
}


void follow_wall(int x)
{
  digitalWrite(left_1, LOW);
  digitalWrite(left_2, HIGH);
  digitalWrite(right_1, LOW);
  digitalWrite(right_2, HIGH);
  analogWrite(left_pwm, pwm - x);
  analogWrite(right_pwm, pwm + x); //+ 5 i sildik 20.05
}
void follow_wall_pwm(int x)
{
  digitalWrite(left_1, LOW);
  digitalWrite(left_2, HIGH);
  digitalWrite(right_1, LOW);
  digitalWrite(right_2, HIGH);
  analogWrite(left_pwm, 30 + x);
  analogWrite(right_pwm, 30 - x);

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////// SENSORS //////////////////////////////////////////////////////////////////////////////////
int ultrasonic_sensors(int num)
{
  if (num == 0) { // Hazne Sensor = 0
    trig = hs_trig;
    echo = hs_echo;
    Serial.print("Hazne Sensor");
  } else if (num == 1) { // Duvar Sensor = 1
    trig = dvr_trig;
    echo = dvr_echo;
    Serial.print("Duvar Sensor");
  } else if (num == 2) { // Arka Sensor = 2
    trig = arka_trig;
    echo = arka_echo;
    Serial.print("Arka Sensor");
  } else if (num == 3) { // Sol Arka Sensor = 3
    trig = solarkas_trig;
    echo = solarkas_echo;
    Serial.print("Sol Arka Sensor");
  } else if (num == 4) { // Sol on Sensor = 4
    trig = solons_trig;
    echo = solons_echo;
    Serial.print("Sol On Sensor");
  } else {
    return 1; // Return ERROR
  }
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  echo_time = pulseIn(echo, HIGH);
  distance = (echo_time / 2) / 29.1;
  if (distance > 200 || distance < 0)
  {
    Serial.println("Out of Range");
    return 200;
  }
  else
  {
    Serial.print(" sensor= ");
    Serial.print(distance);
    Serial.println(" cm");
    return distance;
  }
}
int find_color(int x)
{
  if (x == 0)
  {
    S2 = hs_S2;
    S3 = hs_S3;
    SOut = hs_SOut;
  }
  else if (x == 1)
  {
    S2 = ks_S2;
    S3 = ks_S3;
    SOut = ks_SOut;
  }
  else
  {
    return 99; // RETURN ERROR
  }
  for (int i = 0; i < 9; i++)
  {
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW);
    red = red + pulseIn(SOut, digitalRead(SOut) == HIGH ? LOW : HIGH);
    digitalWrite(S3, HIGH);
    blue = blue + pulseIn(SOut, digitalRead(SOut) == HIGH ? LOW : HIGH);
    digitalWrite(S2, HIGH);
    green = green + pulseIn(SOut, digitalRead(SOut) == HIGH ? LOW : HIGH);
    delay(20);
  }
  red = red / 10;
  green = green / 10;
  blue = blue / 10;
  Serial.print("R Intensity:");
  Serial.print(red, DEC);
  Serial.print(" G Intensity: ");
  Serial.print(green, DEC);
  Serial.print(" B Intensity : ");
  Serial.print(blue, DEC);
  if (x == 0)
  {
    if (red < blue && red < green && red < 240 && green > 285)
    {
      Serial.println(" - (Red Color)");
      return 0; // Kırmızıysa 0
    }

    else if (blue < red && blue < green && blue < 325 && green > 400)
    {
      Serial.println(" - (Blue Color)");
      return 2; // Maviyse 2
    }

    else if (green < red && green - blue < 100 && green < 480 )
    {
      Serial.println(" - (Green Color)");
      return 1; // Yeşilse 1
    }
    else if ((blue - red) > 80 && green < 300) 
    {
      Serial.println(" - (Yellow Color)");
      return 3; // Sarıysa 3
    }
    else 
    {
      Serial.println();
      return 4; // Beyazsa 4
    }
  }
  else
  {
    if (red < blue && red < green && red < 80 && blue > 65 && green > 80)
    {
      Serial.println(" - (Red Color)");
      return 0; // Kırmızıysa 0
    }

    else if (blue < red && blue < green && blue < 77 && (red - blue) > 40 && (red - green) > 20)
    {
      Serial.println(" - (Blue Color)");
      return 2; // Maviyse 2
    }

    else if (green < red && green < blue + 20 && green > 50)
    {
      Serial.println(" - (Green Color)");
      return 1; // Yeşilse 1
    }
    else if ((green && red) < blue && (blue - red) > 15 && (blue - green) > 15) 
    {
      Serial.println(" - (Yellow Color)");
      return 3; // Sarıysa 3
    }
    else 
    {
      Serial.println();
      return 4; // Beyazsa 4
    }
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// SERVO MOTORS ///////////////////////////////////////////////////////////////////////////////////
void kapakac()
{
  for (int i = 0; i <= 150; i++)
  {
    kapak_sag.write(i); // servo kapağın ilk pozisyonu
    kapak_sol.write(180 - i); // servo kapağın ilk pozisyonu
    delay(10);
  }
}

void copal()
{
  for (int i = 0; i <= 150; i++)
  {
    kapak_sag.write(150 - i); // servo kapağın ilk pozisyonu
    kapak_sol.write(i + 30); // servo kapağın ilk pozisyonu
  }

}
void kolkaldir() {
  int i;
  for (i = 130; i >= 0; i--) {
    servokol.write(i);
    delay(75);
  }
  
  kapakac();
  delay(500);
  copal();
  for (i = 0; i <= 130; i++) {
    servokol.write(i);
    delay(100);
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// MAIN FUNCTIONS /////////////////////////////////////////////////////////////////////////////////

void search_pug() 
{
  int tur = 0;
  if (duvarsensor() <= 12) // duvar varsa
  {
    handbrake();
    wait();
    if ((haznesensor() - duvarsensor() > 6) && duvarsensor() != haznesensor()) //ÇÖP YOK DUVAR VAR TAMAM TAMAM
    {
      for (int i = 0; i < 25; i++) {
        right();
        delay(150);
        handbrake();
        wait();
        delay(50);
        if (haznesensor() < 25 && haznesensor() - duvarsensor() > 9) {
          Serial.println("Çöp gördüm");
          hazne = haznesensor();
          duvar = duvarsensor();
          break;
        }
      }

      while (hazne >= 9 || duvarsensor() > 4) {
        hazne = haznesensor();
        forward_pwm(40);
      }
      handbrake();
      wait();
      copal();
      delay(150);
      kapakac();
      delay(150);
      copal();
      delay(150);
      kapakac();
      delay(150);
      copal();
      pug_color = renkoku(0);
      if (pug_color != 4) {
        pos = 1;
        return;
      } else {
        kapakac();
        right();
        delay(400);
        handbrake();
        wait();
        return;
      }


      Serial.println("Çöp Yok, Duvar Var");
    }
    else //Çöp Var,Duvar Var TAMAM TAMAM
    {
      while (duvarsensor() > 6) {
        forward_pwm(40);
      }
      handbrake();
      wait();
      copal();
      delay(150);
      kapakac();
      delay(150);
      copal();
      delay(150);
      kapakac();
      delay(150);
      copal();
      pug_color = renkoku(0);
      right();
      delay(800);
      while (1) { // Çöpü aldıktan sonra sola dönecek
        duvar = duvarsensor() % 30;
        delay(5);
        solon = solonsensor() % 30;
        delay(5);
        solarka = solarkasensor() % 30;
        right();
        if ((solon - solarka < 2) || (solarka - solon < 2)) { // Bu koşul sağlanırsa
          right();
          delay(300);
          handbrake();
          wait();
          delay(100);
          duvar = duvarsensor();
          delay(5);
          hazne = haznesensor();
          delay(5);
          solon = solonsensor();
          delay(5);
          solarka = solarkasensor();
          if ((solarka - solon < 2) || (solon - solarka < 2) && !(duvar < 5)) {
            if (pug_color != 4) {
              pos = 1;
            } else {
              kapakac();
              backward();
              delay(500);
              right();
              delay(400);
              handbrake();
              wait();
              return;
            }
            break;
          }
        }
      }
      Serial.println("Çöp Var, duvar var");

    }

  } else {
    forward();
    if (haznesensor() < 9) {
      handbrake();
      wait();
      copal();
      delay(200);
      kapakac();
      delay(200);
      copal();
      delay(200);
      kapakac();
      delay(200);
      copal();
      pug_color = renkoku(0);

      if (pug_color != 4) {
        pos = 1;
        while (arkasensor() < 10 || solarkasensor() < 10 || solonsensor() < 10) {
          backward_pwm(40);
          if (arkasensor() <= 13) {
            break;
          }
        }
        handbrake();
        wait();
        return;
      } else {
        kapakac();
        right();
        delay(200 * tur);
        forward();
        delay(200);
        handbrake();
        wait();
        return;
      }
    }
  }
}

void search_box()
{
  arka = arkasensor();
  //  delay(10);
  solon = solonsensor();
  //  delay(10);
  solarka = solarkasensor();
  if (arka < 10) { //direkteki sensor 10 cm küçük görürse sola dönmeye başlıyor
    handbrake();
    wait();
    right(); //kutunun soluna atmayalım diye
    delay(300);
    handbrake();
    wait();
    box_color = renkoku(1);
    if (box_color == pug_color) {
      if (pug_color == 3) {
        forward_pwm(40);
        delay(7000);
        handbrake();
        wait();
      }
      kolkaldir();
      delay(100);
      pug_color = renkoku(0);
      if (pug_color == 4) {
        pos = 0;
      } else {
        return;
      }
    }
    left();
    delay(600);
    while (1) { // duvarla robot arasında çöpü aldıktan sonra sağa dön dönme hareketi
      arka = arkasensor() % 30;
      delay(5);
      solon = solonsensor() % 30;
      delay(5);
      solarka = solarkasensor() % 30;
      left();
      if ((solon - solarka < 2) || (solarka - solon < 2)) { // Bu koşul sağlanırsa
        left();
        delay(250);
        handbrake();
        wait();
        delay(100);
        arka = arkasensor();
        delay(5);
        solon = solonsensor();
        delay(5);
        solarka = solarkasensor();

        if ((solonsensor() - solarkasensor() < 5) && !(arkasensor() < 10) && (solarkasensor() < 15) && (solonsensor() < 15)) {

          break;
        }
      }
    }
  } else {
    if (solarkasensor() - solonsensor() < 25) {
      if (solarkasensor() <= ideal) {
        fark = solarkasensor() - solonsensor() + 1;
        Serial.print("FARK");

        Serial.println(fark);

        fark = fark * kp;
        follow_wall(fark);
      } else {
        //        int sensor = solarkasensor();
        //        t = millis();
        //        fark =  ideal - sensor ;
        //        hata = ((fark) * 8 + 10 * ((fark - fark2) / t)) / 5; //ikinci şans pid
        //        fark2 = fark;
        //        follow_wall_pwm(-hata);
        //        delay(200);
        //        follow_wall_pwm(hata);
        //        delay(100);
        fark = solarkasensor() - (solonsensor() - 7); // pid
        Serial.print("FARK");

        Serial.println(fark);

        fark = fark * 5;
        follow_wall(fark);
      }
    } else {

      state = 0;
      solonmod = solonsensor() % 30;
      solarkamod = solarkasensor() % 30;
      while (state == 0) { // Duvardan sol arka sensorü boşa çıkartırken
        solonmod = solonsensor() % 30;
        solarkamod = solarkasensor() % 30;
        pid = (solarkamod - solonmod) * 5;
        follow_wall(-pid);
        if (solonmod - solarkamod < 3) {

          state++;
          break;
        }
      }
      duvar = duvarsensor();
      while (state == 1) {
        solonmod = solonsensor() + 3 % 30;
        solarkamod = solarkasensor() + 3 % 30;
        pid = (solarkamod - solonmod) * 5;
        duvar = duvarsensor();
        follow_wall(-pid);
        if (duvar >= 36) {
          handbrake();
          wait();
          state++;
          break;
        }
      }
      handbrake();
      wait();
      delay(100);
      right();
      delay(1000);
      while (state == 2) { // Sağa dönme
        right();
        delay(250);
        handbrake();
        wait();
        delay(100);
        solonmod = solonsensor() % 30;
        solarkamod = solarkasensor() % 30;
        arka = arkasensor();
        if ((((solonmod - solarkamod ) || (solarkamod - solonmod ) <= 2 )) ) {
          right();
          delay(250);
          solonmod = solonsensor() % 30;
          solarkamod = solarkasensor() % 30;
          arka = arkasensor();
          handbrake();
          wait();
          if ((((solonmod - solarkamod ) || (solarkamod - solonmod ) < 2 ) ) && arka < 45) {
            break;
          }
        }
      }
    }
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
{
  pinMode(right_pwm, OUTPUT);
  pinMode(right_1, OUTPUT);
  pinMode(right_2, OUTPUT);
  pinMode(left_pwm, OUTPUT);
  pinMode(left_1, OUTPUT);
  pinMode(left_2, OUTPUT);                       
  pinMode(hs_trig, OUTPUT);
  pinMode(hs_echo, INPUT);
  pinMode(dvr_trig, OUTPUT);
  pinMode(dvr_echo, INPUT);
  pinMode(arka_trig, OUTPUT);
  pinMode(arka_echo, INPUT);

  pinMode(solons_trig, OUTPUT);
  pinMode(solons_echo, INPUT);
  pinMode(solarkas_trig, OUTPUT);
  pinMode(solarkas_echo, INPUT);

  pinMode(hs_S0, OUTPUT);
  pinMode(hs_S1, OUTPUT);
  pinMode(hs_S2, OUTPUT);
  pinMode(hs_S3, OUTPUT);
  pinMode(hs_SOut, INPUT);
  digitalWrite(hs_S0, HIGH);
  digitalWrite(hs_S1, LOW);

  pinMode(ks_S0, OUTPUT);
  pinMode(ks_S1, OUTPUT);
  pinMode(ks_S2, OUTPUT);
  pinMode(ks_S3, OUTPUT);
  pinMode(ks_SOut, INPUT);
  digitalWrite(ks_S0, HIGH);
  digitalWrite(ks_S1, LOW);
  servokol.attach(51);
  servokol.write(0);  // servonun ilk pozisyon açısı
  kapak_sag.attach(46);
  kapak_sag.write(150); // kapalı 0 açık 150
  kapak_sol.attach(47);
  kapak_sol.write(30); // kapalı 180 açık 30
  servokol.attach(51);
  servokol.write(130);  // servonun ilk pozisyon açısı
  Serial.begin(9600);
}

void loop()
{
  if (pos == 0) { // Search pugs
    search_pug();
  } else if (pos == 1) { // Search Box and Put the pug in the box
    search_box();
  }

}
