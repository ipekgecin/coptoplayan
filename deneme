#include <Servo.h>
Servo kapak_sag;
Servo kapak_sol;
Servo servokol;
//Sol ON Mesafe Sensörü
#define solons_echo 35
#define solons_trig 34
//Sol ARKA Mesafe Sensörü
#define solarkas_echo 38
#define solarkas_trig 39
//Hazne Mesafe Sensörüd
#define hs_echo 32
#define hs_trig 33
//Duvar Mesafe Sensörü
#define dvr_echo 48
#define dvr_trig 49
//ARKA Mesafe Sensörü
#define arka_echo 36
#define arka_trig 37
//Motorlar
#define sag_motor1 42 // İLERİ sağ
#define sag_motor2 40 //GERİ sağ
#define sag_pwm 8 // SAG pwm
#define sol_motor1 43 //SOL İLERİ
#define sol_motor2 41 //SOL GERİ
#define sol_pwm 9 //SOL pwm
//Hazne Renk Sensörü
#define hs_S0 22
#define hs_S1 24
#define hs_S2 26
#define hs_S3 28
#define hs_SOut 30
//Çöp Kutu Renk Sensörü
#define ks_S0 23
#define ks_S1 25
#define ks_S2 27
#define ks_S3 29
#define ks_SOut 31

#define pwm 60
#define kp 6
#define ideal 7

unsigned long t = 0;
int fark;
int fark2 = 0;
int hata = 0;
int arka;
int solon;
int solarka;
int duvar;
int hazne;
int state = 0;
int pid;
int coprenk;
int kuturenk;
int solonmod;
int solarkamod;
int count = 1;
int pos = 0;

void sagpwm(int x)
{
  digitalWrite(sol_motor1, HIGH);
  digitalWrite(sol_motor2, LOW);
  digitalWrite(sag_motor1, LOW);
  digitalWrite(sag_motor2, HIGH);
  analogWrite(sol_pwm, x);
  analogWrite(sag_pwm, x);
}

void solpwm(int x)
{
  digitalWrite(sol_motor1, LOW);
  digitalWrite(sol_motor2, HIGH);
  digitalWrite(sag_motor1, HIGH);
  digitalWrite(sag_motor2, LOW);
  analogWrite(sol_pwm, x);
  analogWrite(sag_pwm, x);
}

void duvartakip(int x)
{
  digitalWrite(sol_motor1, LOW);
  digitalWrite(sol_motor2, HIGH);
  digitalWrite(sag_motor1, LOW);
  digitalWrite(sag_motor2, HIGH);
  analogWrite(sol_pwm, pwm - x);
  analogWrite(sag_pwm, pwm + x); //+ 5 i sildik 20.05
}
void duvartakip2(int x)
{
  digitalWrite(sol_motor1, HIGH);
  digitalWrite(sol_motor2, LOW);
  digitalWrite(sag_motor1, HIGH);
  digitalWrite(sag_motor2, LOW);
  analogWrite(sol_pwm, pwm - x);
  analogWrite(sag_pwm, pwm + x); //+ 5 i sildik 20.05
}
void ileri()
{
  digitalWrite(sol_motor1, HIGH);
  digitalWrite(sol_motor2, LOW);
  digitalWrite(sag_motor1, HIGH);
  digitalWrite(sag_motor2, LOW);
  analogWrite(sol_pwm, pwm + 6);
  analogWrite(sag_pwm, pwm);
}
void ileripwm(int x)
{
  digitalWrite(sol_motor1, HIGH);
  digitalWrite(sol_motor2, LOW);
  digitalWrite(sag_motor1, HIGH);
  digitalWrite(sag_motor2, LOW);
  analogWrite(sol_pwm, x + 6);
  analogWrite(sag_pwm, x);
}
void geri()
{
  digitalWrite(sol_motor1, LOW);
  digitalWrite(sol_motor2, HIGH);
  digitalWrite(sag_motor1, LOW);
  digitalWrite(sag_motor2, HIGH);
  analogWrite(sol_pwm, pwm);
  analogWrite(sag_pwm, pwm);
}

void dur()
{
  digitalWrite(sol_motor1, LOW);
  digitalWrite(sol_motor2, LOW);
  digitalWrite(sag_motor1, LOW);
  digitalWrite(sag_motor2, LOW);
  analogWrite(sol_pwm, 0);
  analogWrite(sag_pwm, 0);
}

void fren()
{
  digitalWrite(sol_motor1, !digitalRead(sol_motor1));
  digitalWrite(sol_motor2, !digitalRead(sol_motor2));
  digitalWrite(sag_motor1, !digitalRead(sag_motor1));
  digitalWrite(sag_motor2, !digitalRead(sag_motor2));
  analogWrite(sol_pwm, 200);
  analogWrite(sag_pwm, 200);
  delay(20);
}

void sol()
{
  digitalWrite(sol_motor1, LOW);
  digitalWrite(sol_motor2, HIGH);
  digitalWrite(sag_motor1, HIGH);
  digitalWrite(sag_motor2, LOW);
  analogWrite(sol_pwm, pwm);
  analogWrite(sag_pwm, pwm);
}

void sag()
{
  digitalWrite(sol_motor1, HIGH);
  digitalWrite(sol_motor2, LOW);
  digitalWrite(sag_motor1, LOW);
  digitalWrite(sag_motor2, HIGH);
  analogWrite(sol_pwm, pwm);
  analogWrite(sag_pwm, pwm);
}

void duvarayaklas(int x)
{
  digitalWrite(sol_motor1, LOW);
  digitalWrite(sol_motor2, HIGH);
  digitalWrite(sag_motor1, LOW);
  digitalWrite(sag_motor2, HIGH);
  analogWrite(sol_pwm, 30 + x);
  analogWrite(sag_pwm, 30 - x);

}

int haznesensor()
{
  delay(20);
  long sure, mesafe;
  digitalWrite(hs_trig, LOW);
  delayMicroseconds(2);
  digitalWrite(hs_trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(hs_trig, LOW);
  sure = pulseIn(hs_echo, HIGH);
  mesafe = (sure / 2) / 29.1;
  if (mesafe > 200 || mesafe < 0)
  {
    Serial.println("Menzil Disi");
  }
  else
  {
    Serial.print("Hazne=");
    Serial.print(mesafe);
    Serial.println(" cm");
    return mesafe;
  }
}

int duvarsensor()
{
  delay(20);
  long sure, mesafe;
  digitalWrite(dvr_trig, LOW);
  delayMicroseconds(2);
  digitalWrite(dvr_trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(dvr_trig, LOW);
  sure = pulseIn(dvr_echo, HIGH);
  mesafe = (sure / 2) / 29.1;

  if (mesafe > 200 || mesafe < 0)
  {
    Serial.println("Menzil Disi");
    return 200;
  }
  else
  {
    Serial.print("Duvar=");
    Serial.print(mesafe);
    Serial.println(" cm");
    return mesafe;
  }
}

int arkasensor()
{
  delay(10);
  long sure, mesafe;
  digitalWrite(arka_trig, LOW);
  delayMicroseconds(2);
  digitalWrite(arka_trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(arka_trig, LOW);
  sure = pulseIn(arka_echo, HIGH);
  mesafe = (sure / 2) / 29.1;
  if (mesafe > 200 || mesafe < 0)
  {
    Serial.println("Menzil Disi");
    return 200;
  }
  else
  {
    Serial.print("Arka sensor=");
    Serial.print(mesafe);
    Serial.println(" cm");
    return mesafe;
  }
}

int solonsensor()
{
  delay(10);
  long sure, mesafe;
  digitalWrite(solons_trig, LOW);
  delayMicroseconds(2);
  digitalWrite(solons_trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(solons_trig, LOW);
  sure = pulseIn(solons_echo, HIGH);
  mesafe = (sure / 2) / 29.1;
  digitalWrite(solons_echo, LOW);
  if (mesafe > 200 || mesafe < 0)
  {
    Serial.println("Menzil Disi");
  }
  else
  {
    Serial.print("Sol Ön=");
    Serial.print(mesafe);
    Serial.println(" cm");
    return mesafe;
  }
}

int solarkasensor()
{
  delay(10);
  long sure, mesafe;
  digitalWrite(solarkas_trig, LOW);
  delayMicroseconds(2);
  digitalWrite(solarkas_trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(solarkas_trig, LOW);
  sure = pulseIn(solarkas_echo, HIGH);
  mesafe = (sure / 2) / 29.1;
  digitalWrite(solarkas_echo, LOW);
  if (mesafe > 200 || mesafe < 0)
  {
    Serial.println("Menzil Disi");
  }
  else
  {
    Serial.print("Sol arka=");
    Serial.print(mesafe);
    Serial.println(" cm");
    return mesafe;
  }
}

int renkoku(int x)
{
  int green, red, blue;
  if (x == 0)
  {
    for (int i = 0; i < 9; i++)
    {
      digitalWrite(hs_S2, LOW);
      digitalWrite(hs_S3, LOW);
      //count OUT, pRed, RED
      red = red + pulseIn(hs_SOut, digitalRead(hs_SOut) == HIGH ? LOW : HIGH);
      digitalWrite(hs_S3, HIGH);
      //count OUT, pBLUE, BLUE
      blue = blue + pulseIn(hs_SOut, digitalRead(hs_SOut) == HIGH ? LOW : HIGH);
      digitalWrite(hs_S2, HIGH);
      //count OUT, pGreen, GREEN
      green = green + pulseIn(hs_SOut, digitalRead(hs_SOut) == HIGH ? LOW : HIGH);
      delay(20);
    }
    red = red / 10;
    green = green / 10;
    blue = blue / 10;
    Serial.print("R Intensity:");
    Serial.print(red, DEC);
    Serial.print(" G Intensity: ");
    Serial.print(green, DEC);
    Serial.print(" B Intensity : ");
    Serial.print(blue, DEC);
    if (red < blue && red < green && red < 210 && green > 300)
    {
      Serial.println(" - (Red Color)");
      return 0; // Kırmızıysa 0
    }

    else if (blue < red && blue < green && blue < 260 && green > 300)
    {
      Serial.println(" - (Blue Color)");
      return 2; // Maviyse 2
    }

    else if (green < red && green - blue < 30 && green < 300 )
    {
      Serial.println(" - (Green Color)");
      return 1; // Yeşilse 1
    }
    else if ((blue - red) > 15 && green < 300) {
      Serial.println(" - (Yellow Color)");
      return 3; // Sarıysa 3
    }
    else {
      Serial.println();
      return 4; // Beyazsa 4
    }
    delay(20);
  }

  if (x == 1) { //x 1 ise kutu sensor
    for (int i = 0; i < 9; i++) {
      digitalWrite(ks_S2, LOW);
      digitalWrite(ks_S3, LOW);
      //count OUT, pRed, RED
      red = red + pulseIn(ks_SOut, digitalRead(ks_SOut) == HIGH ? LOW : HIGH);
      digitalWrite(ks_S3, HIGH);
      //count OUT, pBLUE, BLUE
      blue = blue + pulseIn(ks_SOut, digitalRead(ks_SOut) == HIGH ? LOW : HIGH);
      digitalWrite(ks_S2, HIGH);
      //count OUT, pGreen, GREEN
      green = green + pulseIn(ks_SOut, digitalRead(ks_SOut) == HIGH ? LOW : HIGH);
      delay(20);
    }
    red = red / 10;
    green = green / 10;
    blue = blue / 10;
    Serial.print("R Intensity:");
    Serial.print(red, DEC);
    Serial.print(" G Intensity: ");
    Serial.print(green, DEC);
    Serial.print(" B Intensity : ");
    Serial.print(blue, DEC);
    if (red < blue && red < green && red < 80 && blue > 65 && green > 80)
    {
      Serial.println(" - (Red Color)");
      return 0; // Kırmızıysa 0
    }

    else if (blue < red && blue < green && blue < 80 && (red - blue) > 40 && (red - green) > 20)
    {
      Serial.println(" - (Blue Color)");
      return 2; // Maviyse 2
    }

    else if (green < red && green < blue )
    {
      Serial.println(" - (Green Color)");
      return 1; // Yeşilse 1
    }
    else if ((green && red) < blue && (blue - red) > 15 && (blue - green) > 15) {
      Serial.println(" - (Yellow Color)");
      return 3; // Sarıysa 3
    }
    else {
      Serial.println();
      return 4; // Beyazsa 4
    }
    delay(20);
  }
}

void kapakac()
{
  for (int i = 1; i <= 150; i++)
  {
    kapak_sag.write(i); // servo kapağın ilk pozisyonu
    kapak_sol.write(180 - i); // servo kapağın ilk pozisyonu
    delay(10);
  }
}

void copal()
{
  for (int k = 0; k <= 3; k++){
  for (int i = 0; i <= 150; i++)
  {
    kapak_sag.write(150 - i); // servo kapağın ilk pozisyonu
    kapak_sol.write(i + 30); // servo kapağın ilk pozisyonu
    delay(20);
  }
  }
}

void copara()
{
  hazne = haznesensor();
  int dm[10];
  for (int z = 0; z < 10; z++) {
    sagpwm(100);
    delay(100);
    fren();
    dur();
    delay(1);
    hazne = haznesensor();
    dm[z] = hazne;
    if (dm[z] < 8) {
      fren();
      dur();
      if (haznesensor() - duvarsensor() < 9 || duvarsensor() - haznesensor() < 9) {
        copal();

      }

    } else if (dm[z] < 20) {
      fren();
      dur();
      delay(100);
      ileri();
      delay(1000);
      sag();
      delay(100);
      sol();
      delay(200);
      fren();
      dur();
      delay(50);
    }
    delay(1);
    Serial.println(dm[z]);
  }
}

void copara3()
{

  int p = 0;
  if (duvarsensor() > 10) {
    ileri();
    if (haznesensor() <= 17) {
      if (duvarsensor() - haznesensor() > 6) {
        while (haznesensor() > 8) {
          ileri();
          delay(100);
        }
        fren();
        delay(10);
        dur();
      }
    }
    fren();
    delay(20);
    dur();
  } else {

    if (haznesensor() - duvarsensor() <= 6) {
      fren();
      delay(20);
      dur();
      sag();
      delay(600);
      while (1) { // sola dönme hareketi
        arka = arkasensor() % 30;
        delay(5);
        solon = solonsensor() % 30;
        delay(5);
        solarka = solarkasensor() % 30;
        sag();
        if ((solon - solarka < 2) || (solarka - solon < 2)) { // Bu koşul sağlanırsa
          sag();
          delay(250);
          fren();
          dur();
          delay(100);
          arka = arkasensor();
          delay(5);
          solon = solonsensor();
          delay(5);
          solarka = solarkasensor();

          if (!(arka < 15) && (solarka < 15) && (solon < 15)) {
            break;
          }
        }
      }
    } else {
      sag();
      delay(600);
      while (1) { // sola dönme hareketi
        arka = arkasensor() % 30;
        delay(5);
        solon = solonsensor() % 30;
        delay(5);
        solarka = solarkasensor() % 30;
        sag();
        if ((solon - solarka < 2) || (solarka - solon < 2)) { // Bu koşul sağlanırsa
          sag();
          delay(250);
          fren();
          dur();
          delay(100);
          arka = arkasensor();
          delay(5);
          solon = solonsensor();
          delay(5);
          solarka = solarkasensor();

          if (!(arka < 15) && (solarka < 15) && (solon < 15)) {
            break;
          }
        }
      }
    }
  }
}


void copara5()
{
  int tur = 0;
  if (duvarsensor() <= 13) // duvar varsa
  {
    fren();
    dur();
    if ((haznesensor() - duvarsensor() > 6) && duvarsensor() != haznesensor())
    {
      Serial.println("Çöp Yok, Duvar Var");
    }
    else
    {
      while (duvarsensor() > 7) {
        ileripwm(30);
      }
      fren();
      dur();
      delay(100);
      copal();
      delay(100);
      sol();
      delay(600);
      while (1) { // Çöpü aldıktan sonra sola dönecek
        duvar = duvarsensor() % 30;
        delay(5);
        solon = solonsensor() % 30;
        delay(5);
        solarka = solarkasensor() % 30;
        sol();
        if ((solon - solarka < 2) || (solarka - solon < 2)) { // Bu koşul sağlanırsa
          sol();
          delay(250);
          fren();
          dur();
          delay(100);
          duvar = duvarsensor();
          delay(5);
          solon = solonsensor();
          delay(5);
          solarka = solarkasensor();
          if (!(duvar < 15) && (solarka < 15) && (solon < 15)) {
            break;
          }
        }
      }
      Serial.println("Çöp Var, duvar var");


    }
  } else {
    delay(20);
    hazne = haznesensor();
    ileri();
    if (hazne <= 10 )
    {
      Serial.println("Çöp var duvar yok");
      fren();
      dur();
      sol();
      delay(100);
      fren();
      dur();
      delay(10000);
    }

    else
    {
      Serial.println("Çöp yok, duvar yok");
    }
  }

}
///////////////////////////////////////////////KOL//////////////////////////////////
void kolkaldir() {
  int x = 1;
  int i = 0;
  //servokol.write(180);
  kuturenk = renkoku(x);

  if (kuturenk == 0) {
    for (i = 130; i <= 30; i--) {
      servokol.write(i);
      delay(50);
    }
  }

  if (kuturenk == 1) {
    for (i = 130; i <= 50; i--) {
      servokol.write(i);
      delay(50);
    }
  }

  if (kuturenk == 2) {
    for (i = 130; i <= 0; i--) {
      servokol.write(i);
      delay(50);
    }
  }

  if (kuturenk == 3) {
    for (i = 130; i <= 80; i--) {
      servokol.write(i);
      delay(50);
    }
  }

  if (kuturenk == 4) {
    for (i = 130; i <= 600; i--) {
      servokol.write(i);
      delay(50);
    }
  }
}


////////////////////////////////////////////////////////////////////////////////////
void kutuara() //HEMEN HEMEN TAMAM
{
  arka = arkasensor();
  //  delay(10);
  solon = solonsensor();
  //  delay(10);
  solarka = solarkasensor();
  if (arka <= 10) { //direkteki sensor 10 cm küçük görürse sola dönmeye başlıyor
    fren();
    dur();
    // bes_cm(arka);
    sol();
    delay(600);
    while (1) { // sola dönme hareketi
      arka = arkasensor() % 30;
      delay(5);
      solon = solonsensor() % 30;
      delay(5);
      solarka = solarkasensor() % 30;
      sol();
      if ((solon - solarka < 2) || (solarka - solon < 2)) { // Bu koşul sağlanırsa
        sol();
        delay(250);
        fren();
        dur();
        delay(100);
        arka = arkasensor();
        delay(5);
        solon = solonsensor();
        delay(5);
        solarka = solarkasensor();

        if (!(arka < 15) && (solarka < 15) && (solon < 15)) {
          break;
        }
      }
    }
  } else {
    if (solarkasensor() - solonsensor() < 25) {
      if (solarkasensor() <= ideal) {
        fark = solarkasensor() - solonsensor() + 1;
        Serial.print("FARK");

        Serial.println(fark);

        fark = fark * kp;
        duvartakip(fark);
      } else {

        int sensor = solarkasensor() % 30;
        t = millis();
        fark =  ideal - sensor ;
        hata = ((fark) * 10 + 8 * ((fark - fark2) / t)) / 5;
        fark2 = fark;
        duvarayaklas(hata);
        for (int i = 0; i < 10; i++) {
          if (arkasensor() <= 11) {
            fren();
            dur();
            delay(20);
          }
        }
        duvarayaklas(-hata);
        for (int i = 0; i < 10; i++) {
          if (arkasensor() <= 11) {
            fren();
            dur();
            delay(10);
          }
        }
      }
    } else {

      state = 0;
      solonmod = solonsensor() % 30;
      solarkamod = solarkasensor() % 30;
      while (state == 0) { // Duvardan sol arka sensorü boşa çıkartırken
        solonmod = solonsensor() % 30;
        solarkamod = solarkasensor() % 30;
        pid = (solarkamod - solonmod) * 5;
        duvartakip(-pid);
        if (solonmod - solarkamod < 3) {

          state++;
          break;
        }
      }
      duvar = duvarsensor();
      while (state == 1) {
        solonmod = solonsensor() + 3 % 30;
        solarkamod = solarkasensor() + 3 % 30;
        pid = (solarkamod - solonmod) * 5;
        duvar = duvarsensor();
        duvartakip(-pid);
        if (duvar >= 36) {
          fren();
          dur();
          state++;
          break;
        }
      }
      fren();
      dur();
      delay(100);
      sag();
      delay(1000);
      while (state == 2) { // Sağa dönme
        sag();
        delay(250);
        fren();
        dur();
        delay(100);
        solonmod = solonsensor() % 30;
        solarkamod = solarkasensor() % 30;
        arka = arkasensor();
        if ((((solonmod - solarkamod ) || (solarkamod - solonmod ) <= 2 )) ) {
          sag();
          delay(250);
          solonmod = solonsensor() % 30;
          solarkamod = solarkasensor() % 30;
          arka = arkasensor();
          fren();
          dur();
          if ((((solonmod - solarkamod ) || (solarkamod - solonmod ) < 2 ) ) && arka < 45) {
            break;
          }
        }
      }
    }
  }
}
void copat() {
  for (int i = 150; i >= 0; i--) {
    servokol.write(i);
    delay(50);
  }
  delay(500);
  kapakac();
  delay(3000);
  copal();
  delay(100);
  for (int i = 0; i <= 150; i++) {
    servokol.write(i);
    delay(100);
  }
  delay(1000);
  kapakac();
}
void setup()
{
  pinMode(sag_pwm, OUTPUT);
  pinMode(sag_motor1, OUTPUT);
  pinMode(sag_motor2, OUTPUT);
  pinMode(sol_pwm, OUTPUT);
  pinMode(sol_motor1, OUTPUT);
  pinMode(sol_motor2, OUTPUT);                        //for motor driver with 2 dir pins
  pinMode(hs_trig, OUTPUT);
  pinMode(hs_echo, INPUT);
  pinMode(dvr_trig, OUTPUT);
  pinMode(dvr_echo, INPUT);
  pinMode(arka_trig, OUTPUT);
  pinMode(arka_echo, INPUT);

  pinMode(solons_trig, OUTPUT);
  pinMode(solons_echo, INPUT);
  pinMode(solarkas_trig, OUTPUT);
  pinMode(solarkas_echo, INPUT);

  pinMode(hs_S0, OUTPUT);
  pinMode(hs_S1, OUTPUT);
  pinMode(hs_S2, OUTPUT);
  pinMode(hs_S3, OUTPUT);
  pinMode(hs_SOut, INPUT);
  digitalWrite(hs_S0, HIGH);
  digitalWrite(hs_S1, LOW);

  pinMode(ks_S0, OUTPUT);
  pinMode(ks_S1, OUTPUT);
  pinMode(ks_S2, OUTPUT);
  pinMode(ks_S3, OUTPUT);
  pinMode(ks_SOut, INPUT);
  digitalWrite(ks_S0, HIGH);
  digitalWrite(ks_S1, LOW);
  servokol.attach(51);
  servokol.write(0);  // servonun ilk pozisyon açısı
  kapak_sag.attach(46);
  kapak_sag.write(150); // kapalı 0 açık 150
  kapak_sol.attach(47);
  kapak_sol.write(30); // kapalı 180 açık 30
  servokol.attach(51);
  servokol.write(130);  // servonun ilk pozisyon açısı
  // delY 50 HERBİR İ DEN SONRA FORUN İÇİNDE
  Serial.begin(9600);
}

void loop()
{
  //renkoku(1);
  //copal();
  //kolkaldir();
  //kapakac();

}
